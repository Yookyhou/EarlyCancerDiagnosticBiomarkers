plot_data <- merged_data[rownames(merged_data) %in% rownames(diff_genes), ]
plot(t(plot_data), pch=16, col=ifelse(colnames(plot_data) %in% colnames(early_stage), "blue", "red"),
xlab="Sample", ylab="Expression", main="Gene Expression Scatterplot")
legend("topright", legend=c("Early Stage", "Late Stage"), col=c("blue", "red"), pch=16)
}
# 调用函数绘制基因表达谱热图
png(file="/Users/yooky/Desktop/建模/基因/Gene_Expression_Heatmap.png", width=1000, height=800)
gene_heatmap(merged_data, sig_genes)
dev.off()
# 调用函数绘制基因表达谱散点图
png(file="/Users/yooky/Desktop/建模/基因/Gene_Expression_Scatterplot.png", width=1000, height=800)
gene_scatterplot(merged_data, sig_genes)
dev.off()
# 绘制火山图
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=ifelse(abs(res$log2FoldChange) > log2_fc_threshold & res$padj < alpha, "red", "black"),
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=-log10(alpha), col="red", lty=2)
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="blue", lty=2)
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("black", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
# 绘制火山图
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col="black",  # 将差异基因和非差异基因都设置为黑色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=-log10(alpha), col="red", lty=2)
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="blue", lty=2)
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("black", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
# 绘制火山图
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=ifelse(abs(res$log2FoldChange) > log2_fc_threshold & res$padj < alpha, "red", "black"),  # 使用红色表示显著差异基因，黑色表示非显著差异基因
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=-log10(alpha), col="red", lty=2)
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="blue", lty=2)
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("black", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
# 绘制火山图
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=ifelse(abs(res$log2FoldChange) > log2_fc_threshold & res$padj < alpha, "red", "black"),  # 使用红色表示显著差异基因，黑色表示非显著差异基因
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=-log10(alpha), col="red", lty=2)
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="blue", lty=2)
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("black", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
# 绘制火山图
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col="black",  # 将差异基因和非差异基因都设置为黑色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线，上阈值线为红色，下阈值线为蓝色
abline(h=-log10(alpha), col="red", lty=2)
abline(h=log10(alpha), col="blue", lty=2)
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="black", lty=2)
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("black", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
# 绘制火山图
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col="black",  # 将差异基因和非差异基因都设置为黑色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线，上阈值线为红色，下阈值线为蓝色
abline(h=-log10(alpha), col="red", lty=2)
abline(h=log10(alpha), col="blue", lty=2)
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="black", lty=2)
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("black", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
# 计算每个点是否显著
# 显著的基因需满足p-value小于alpha，并且log2FoldChange的绝对值大于阈值
significant <- res$padj < alpha & abs(res$log2FoldChange) > log2_fc_threshold
# 设置颜色，显著的为红色，不显著的为灰色
point_colors <- ifelse(significant, "red", "gray")
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=point_colors,  # 使用显著性来设定颜色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=-log10(alpha), col="red", lty=2)  # 红色线表示p-value阈值
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="black", lty=2)  # 黑色线表示Fold Change阈值
# 添加图例
legend("topright", legend=c("Not Significant", "Significant"),
col=c("gray", "red"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
log_p_threshold <- -log10(alpha)
# 计算每个点是否显著
significant <- res$padj < alpha & abs(res$log2FoldChange) > log2_fc_threshold
# 进一步根据 -log10(padj) 值决定颜色
point_colors <- ifelse(res$padj < alpha, ifelse(-log10(res$padj) > log_p_threshold, "red", "blue"), "gray")
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=point_colors,  # 使用显著性来设定颜色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=log_p_threshold, col="red", lty=2)  # 红色线表示p-value阈值
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="black", lty=2)  # 黑色线表示Fold Change阈值
# 添加图例
legend("topright", legend=c("Not Significant", "Significant Above", "Significant Below"),
col=c("gray", "red", "blue"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
top_genes <- head(res[order(res$padj), ], 10)
top_expr_data <- expr_matrix[rownames(expr_matrix) %in% top_genes$names, ]
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 绘制热图
png(file="/Users/yooky/Desktop/建模/基因/Top10_Genes_Heatmap.png", width=1000, height=800)
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(pheatmap)
install.packages("pheatmap")
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 绘制热图
png(file="/Users/yooky/Desktop/建模/基因/Top10_Genes_Heatmap.png", width=1000, height=800)
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 绘制热图
png(file="/Users/yooky/Desktop/建模/基因/Top10_Genes_Heatmap.png", width=1000, height=800)
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 绘制热图
png(file="/Users/yooky/Desktop/建模/基因/Top10_Genes_Heatmap.png", width=1000, height=800)
# 确保colData中包含正确的注释信息
colData <- data.frame(condition = factor(c(rep("Early", ncol(early_stage)), rep("Later", ncol(later_stage)))),
row.names = colnames(countData))
# 绘制热图
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,  # 确保这里的colData已经正确设置
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 绘制热图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Top10_Genes_Heatmap.png", width=1000, height=800)
# 确保colData中包含正确的注释信息
colData <- data.frame(condition = factor(c(rep("Early", ncol(early_stage)), rep("Later", ncol(later_stage)))),
row.names = colnames(countData))
# 绘制热图
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,  # 确保这里的colData已经正确设置
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(DESeq2)
# 读取数据
normal_stage <- read.csv("/Users/yooky/Desktop/建模/基因/附件1：Normal_exp.csv", header=TRUE, row.names=1)
# 创建DESeq2矩阵格式
countData <- cbind(normal_stage, early_stage)
colData <- data.frame(condition = factor(c(rep("Normal", ncol(normal_stage)), rep("Early", ncol(early_stage)))))
# 构建DESeq对象
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ condition)
dds <- DESeq(dds)
# 获取差异表达基因
res <- results(dds)
# 筛选padj<0.05的基因
significant_genes <- res[res$padj < 0.05, ]
# 将结果写入CSV文件
write.csv(as.data.frame(significant_genes), file="/Users/yooky/Desktop/建模/基因/Differential_Expression_Early_Normal.csv")
# 生成MA-plot
png(file="/Users/yooky/Desktop/建模/基因/MA-Early-Normal-plot.png", width=1000, height=800)
plotMA(dds, main="MA-plot", ylim=c(-2, 2))
dev.off()
if ("padj" %in% colnames(res) && "log2FoldChange" %in% colnames(res)) {
png(file="/Users/yooky/Desktop/建模/基因/第一问/Normal_Early_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
} else {
print("The data object 'res' does not have the necessary columns.")
}
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 绘制热图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Normal_Early_Top10_Genes_Heatmap.png", width=1000, height=800)
# 确保colData中包含正确的注释信息
colData <- data.frame(condition = factor(c(rep("Normal", ncol(normal_stage)), rep("Early", ncol(early_stage)))),
row.names = colnames(countData))
# 绘制热图
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,  # 确保这里的colData已经正确设置
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 确保colData中包含正确的注释信息
colData <- data.frame(condition = factor(c(rep("Normal", ncol(normal_stage)), rep("Early", ncol(early_stage)))),
row.names = colnames(countData))
# 绘制热图
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,  # 确保这里的colData已经正确设置
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
if ("padj" %in% colnames(res) && "log2FoldChange" %in% colnames(res)) {
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
} else {
print("The data object 'res' does not have the necessary columns.")
}
library(DESeq2)
# 读取数据
early_stage <- read.csv("/Users/yooky/Desktop/建模/基因/附件2：EarlyStage_exp.csv", header=TRUE, row.names=1)
later_stage <- read.csv("/Users/yooky/Desktop/建模/基因/附件3：LaterStage_exp.csv", header=TRUE, row.names=1)
# 创建DESeq2矩阵格式
countData <- cbind(early_stage, later_stage)
colData <- data.frame(condition = factor(c(rep("Early", ncol(early_stage)), rep("Later", ncol(later_stage)))))
# 构建DESeq对象
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ condition)
dds <- DESeq(dds)
# 获取差异表达基因
res <- results(dds)
# 筛选padj<0.05的基因
significant_genes <- res[res$padj < 0.05, ]
# 将结果写入CSV文件
write.csv(as.data.frame(significant_genes), file="/Users/yooky/Desktop/建模/基因/Differential_Expression_Early_Later.csv")
# 生成MA-plot
plotMA(dds, main="MA-plot", ylim=c(-2, 2))
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
log_p_threshold <- -log10(alpha)
# 计算每个点是否显著
significant <- res$padj < alpha & abs(res$log2FoldChange) > log2_fc_threshold
# 进一步根据 -log10(padj) 值决定颜色
point_colors <- ifelse(res$padj < alpha, ifelse(-log10(res$padj) > log_p_threshold, "red", "blue"), "gray")
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=point_colors,  # 使用显著性来设定颜色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=log_p_threshold, col="red", lty=2)  # 红色线表示p-value阈值
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="black", lty=2)  # 黑色线表示Fold Change阈值
# 添加图例
legend("topright", legend=c("Not Significant", "Significant Above", "Significant Below"),
col=c("gray", "red", "blue"), pch=20)
}
# 绘制火山图
png(file="/Users/yooky/Desktop/建模/基因/第一问/Early_Later_Volcano_Plot.png", width=1000, height=800)
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
dev.off()
volcano_plot <- function(res, title) {
# 定义显著性阈值
alpha <- 0.05
log2_fc_threshold <- 1
log_p_threshold <- -log10(alpha)
# 计算每个点是否显著
significant <- res$padj < alpha & abs(res$log2FoldChange) > log2_fc_threshold
# 进一步根据 -log10(padj) 值决定颜色
point_colors <- ifelse(res$padj < alpha, ifelse(-log10(res$padj) > log_p_threshold, "red", "blue"), "gray")
# 绘制火山图
plot(res$log2FoldChange, -log10(res$padj),
pch=20,
col=point_colors,  # 使用显著性来设定颜色
xlab="Log2 Fold Change",
ylab="-log10(Adjusted p-value)",
main=title)
# 添加显著性阈值线
abline(h=log_p_threshold, col="red", lty=2)  # 红色线表示p-value阈值
abline(v=c(-log2_fc_threshold, log2_fc_threshold), col="black", lty=2)  # 黑色线表示Fold Change阈值
# 添加图例
legend("topright", legend=c("Not Significant", "Significant Above", "Significant Below"),
col=c("gray", "red", "blue"), pch=20)
}
# 绘制火山图
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 确保colData中包含正确的注释信息
colData <- data.frame(condition = factor(c(rep("Early", ncol(early_stage)), rep("Later", ncol(later_stage)))),
row.names = colnames(countData))
# 绘制热图
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,  # 确保这里的colData已经正确设置
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
library(DESeq2)
# 读取数据
normal_stage <- read.csv("/Users/yooky/Desktop/建模/基因/附件1：Normal_exp.csv", header=TRUE, row.names=1)
# 创建DESeq2矩阵格式
countData <- cbind(normal_stage, early_stage)
colData <- data.frame(condition = factor(c(rep("Normal", ncol(normal_stage)), rep("Early", ncol(early_stage)))))
# 构建DESeq对象
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~ condition)
dds <- DESeq(dds)
# 获取差异表达基因
res <- results(dds)
# 筛选padj<0.05的基因
significant_genes <- res[res$padj < 0.05, ]
# 将结果写入CSV文件
write.csv(as.data.frame(significant_genes), file="/Users/yooky/Desktop/建模/基因/Differential_Expression_Early_Normal.csv")
# 生成MA-plot
plotMA(dds, main="MA-plot", ylim=c(-2, 2))
if ("padj" %in% colnames(res) && "log2FoldChange" %in% colnames(res)) {
volcano_plot(res, title="Volcano Plot of Differential Expression (Early vs Later)")
} else {
print("The data object 'res' does not have the necessary columns.")
}
library(pheatmap)
# 筛选padj<0.05的基因并排序
significant_genes <- res[res$padj < 0.05, ]
top_genes <- head(significant_genes[order(significant_genes$padj), ], 10)
# 获取顶部基因的名称
top_gene_names <- rownames(top_genes)
# 提取这些基因的表达数据
top_gene_data <- assay(dds)[top_gene_names, ]
# 确保colData中包含正确的注释信息
colData <- data.frame(condition = factor(c(rep("Normal", ncol(normal_stage)), rep("Early", ncol(early_stage)))),
row.names = colnames(countData))
# 绘制热图
pheatmap(log2(top_gene_data + 1),
scale = "row",
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
annotation_col = colData,  # 确保这里的colData已经正确设置
show_rownames = TRUE,
show_colnames = FALSE,
main = "Heatmap of Top 10 Significant Genes")
